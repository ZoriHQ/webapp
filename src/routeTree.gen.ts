/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedProjectsRouteImport } from './routes/_protected.projects'
import { Route as ProtectedProjectsIndexRouteImport } from './routes/_protected.projects.index'
import { Route as ProtectedProjectsProjectIdRouteImport } from './routes/_protected.projects.$projectId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedProjectsRoute = ProtectedProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedProjectsIndexRoute = ProtectedProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedProjectsRoute,
} as any)
const ProtectedProjectsProjectIdRoute =
  ProtectedProjectsProjectIdRouteImport.update({
    id: '/$projectId',
    path: '/$projectId',
    getParentRoute: () => ProtectedProjectsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/projects': typeof ProtectedProjectsRouteWithChildren
  '/projects/$projectId': typeof ProtectedProjectsProjectIdRoute
  '/projects/': typeof ProtectedProjectsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/projects/$projectId': typeof ProtectedProjectsProjectIdRoute
  '/projects': typeof ProtectedProjectsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_protected/projects': typeof ProtectedProjectsRouteWithChildren
  '/_protected/projects/$projectId': typeof ProtectedProjectsProjectIdRoute
  '/_protected/projects/': typeof ProtectedProjectsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/projects'
    | '/projects/$projectId'
    | '/projects/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/register'
    | '/projects/$projectId'
    | '/projects'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/about'
    | '/login'
    | '/register'
    | '/_protected/projects'
    | '/_protected/projects/$projectId'
    | '/_protected/projects/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/projects': {
      id: '/_protected/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProtectedProjectsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/projects/': {
      id: '/_protected/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof ProtectedProjectsIndexRouteImport
      parentRoute: typeof ProtectedProjectsRoute
    }
    '/_protected/projects/$projectId': {
      id: '/_protected/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProtectedProjectsProjectIdRouteImport
      parentRoute: typeof ProtectedProjectsRoute
    }
  }
}

interface ProtectedProjectsRouteChildren {
  ProtectedProjectsProjectIdRoute: typeof ProtectedProjectsProjectIdRoute
  ProtectedProjectsIndexRoute: typeof ProtectedProjectsIndexRoute
}

const ProtectedProjectsRouteChildren: ProtectedProjectsRouteChildren = {
  ProtectedProjectsProjectIdRoute: ProtectedProjectsProjectIdRoute,
  ProtectedProjectsIndexRoute: ProtectedProjectsIndexRoute,
}

const ProtectedProjectsRouteWithChildren =
  ProtectedProjectsRoute._addFileChildren(ProtectedProjectsRouteChildren)

interface ProtectedRouteChildren {
  ProtectedProjectsRoute: typeof ProtectedProjectsRouteWithChildren
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedProjectsRoute: ProtectedProjectsRouteWithChildren,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
